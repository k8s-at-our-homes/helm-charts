{{- if .Values.photon.deploy }}
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: {{ template "common.fullname" . }}-photon
  labels:
    app.kubernetes.io/component: "photon"
    {{- include "common.labels" . | nindent 4 }}
spec:
  revisionHistoryLimit: 0
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: "photon"
      {{- include "common.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: "photon"
        {{- include "common.selectorLabels" . | nindent 8 }}
    spec:
      securityContext: {{ toYaml .Values.photon.podSecurityContext | nindent 8 }}
      containers:
      - name: photon
        image: '{{ .Values.photon.image.registry }}/{{ .Values.photon.image.repository }}:{{ .Values.photon.image.tag }}'
        imagePullPolicy: {{ .Values.photon.image.pullPolicy }}
        env:
        - name: UPDATE_STRATEGY
          value: PARALLEL
        - name: UPDATE_INTERVAL
          value: 24h
        startupProbe:
          tcpSocket:
            port: http
          # It can take several hours for photon to be ready, especially on the first run
          failureThreshold: 6000
          periodSeconds: 30
        livenessProbe:
          tcpSocket:
            port: http
        readinessProbe:
          tcpSocket:
            port: http
        volumeMounts:
        - name: data
          mountPath: /photon/photon_data
        ports:
        - name: http
          containerPort: 2322
        resources: {{ toYaml .Values.app.resources | nindent 12 }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  {{- include "common.selectorLabels" . | nindent 18 }}
              topologyKey: "kubernetes.io/hostname"
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: data
      labels:
        {{- include "common.selectorLabels" . | nindent 8 }}
        {{ if .Values.photon.persistence.labels }}
        {{ toYaml .Values.photon.persistence.labels | nindent 8 }}
        {{ end }}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.photon.persistence.size }}
{{- end }}
