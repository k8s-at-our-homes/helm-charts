apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: {{ .Values.database.clusterName }}
  labels:
    app.kubernetes.io/component: "db"
    {{- include "common.labels" . | nindent 4 }}
spec:
  instances: {{ .Values.database.replicas }}
  imageName: {{ .Values.database.image.registry }}/{{ .Values.database.image.repository }}:{{ .Values.database.image.tag }}

  postgresql:
    shared_preload_libraries:
      - 'vchord.so'

  logLevel: {{ .Values.database.logLevel }}

  storage:
    size: {{ .Values.database.size }}
    {{- if hasKey .Values.database "storageClass" }}
    storageClass: {{ .Values.database.storageClass | quote }}
    {{- end }}
  {{- if and .Values.database.backups.enabled .Values.database.backups.useBarmanCloudPlugin }}
  plugins:
  - name: barman-cloud.cloudnative-pg.io
    isWALArchiver: true
    parameters:
      barmanObjectName: {{ .Values.database.clusterName }}-backup-provider
  {{- end }}
  {{- if and .Values.database.backups.enabled (not .Values.database.backups.useBarmanCloudPlugin) }}
  backup:
    retentionPolicy: {{ .Values.database.backups.retention }}
    barmanObjectStore:
      destinationPath: {{ .Values.database.backups.path | quote }}
      endpointURL: {{ .Values.database.backups.endpoint }}
      s3Credentials:
        accessKeyId:
          name: {{ .Values.database.backups.secretName }}
          key: {{ .Values.database.backups.accessKeyName }}
        secretAccessKey:
          name: {{ .Values.database.backups.secretName }}
          key: {{ .Values.database.backups.secretKeyName }}
  {{- end }}

  {{- if .Values.database.topologySpreadConstraints }}
  topologySpreadConstraints:
  {{- range .Values.database.topologySpreadConstraints }}
  - maxSkew: 1
    topologyKey: {{ .topologyKey }}
    whenUnsatisfiable: {{ .whenUnsatisfiable }}
    labelSelector:
      matchLabels:
        "cnpg.io/cluster": {{ $.Values.database.clusterName }}
        "cnpg.io/podRole": instance
  {{- end }}
  {{- end }}
