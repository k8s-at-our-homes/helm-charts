apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "common.fullname" . }}-primary
  labels:
    app.kubernetes.io/name: {{ template "common.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: "adguard-primary"
    {{- include "common.labels" . | nindent 4 }}
spec:
  revisionHistoryLimit: 0
  replicas: {{ .Values.primary.replicas }}
  strategy: {{ toYaml .Values.primary.strategy | nindent 4 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "common.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: "adguard-primary"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "common.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: "adguard-primary"
        {{- include "common.labels" . | nindent 8 }}
    spec:
      initContainers:
        - name: sync
          image: "{{ .Values.sync.image.registry }}/{{ .Values.sync.image.repository }}:{{ .Values.sync.image.tag }}"
          imagePullPolicy: IfNotPresent
          restartPolicy: Always
          args:
            - run
          env:
            - name: ORIGIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.sync.config.secretName }}
                  key: ORIGIN_PASSWORD
          {{- range $i, $v := untilStep 1 ((add1 .Values.secondary.replicas) | int ) 1 }}
            - name: REPLICA{{ $v }}_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "common.fullname" $ }}-secondary-password
                  key: password
          {{- end }}
          envFrom:
            - configMapRef:
                name: {{ template "common.fullname" . }}-sync-config
          ports:
            - name: sync
              containerPort: 8080
              protocol: TCP
          resources: {{ toYaml .Values.sync.resources | nindent 12 }}
      containers:
        - name: adguard
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: IfNotPresent
          env:
            - name: TZ
              value: "Europe/Amsterdam"
          args:
            - --config
            - /opt/adguardhome/conf/AdGuardHome.yaml
            - --work-dir
            - /opt/adguardhome/work
            - --no-check-update
          ports:
            - name: web
              containerPort: 3000
              protocol: TCP
          resources: {{ toYaml .Values.primary.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /opt/adguardhome/conf
              subPath: conf
            - name: data
              mountPath: /opt/adguardhome/work
              subPath: work
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ template "common.fullname" . }}-primary
