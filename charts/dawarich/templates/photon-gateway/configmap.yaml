{{- if .Values.photon.enabled }}
{{- $allHosts := list }}
{{- $preferredHosts := list }}
{{- $regularHosts := list }}

{{- /* Add internal photon host if deployed */ -}}
{{- if .Values.photon.deploy }}
{{- $internalHost := dict "host" (printf "%s-photon" (include "common.fullname" .)) "scheme" "http" "port" 2322 "preferred" true "internal" true }}
{{- $preferredHosts = append $preferredHosts $internalHost }}
{{- end }}

{{- /* Separate hosts by preference, applying defaults */ -}}
{{- range $host := .Values.photon.gateway.hosts }}
{{- $processedHost := dict "host" $host.host }}
{{- $processedHost = set $processedHost "scheme" (default "https" $host.scheme) }}
{{- $processedHost = set $processedHost "port" (default 443 $host.port) }}
{{- if $host.rateLimit }}
{{- $processedHost = set $processedHost "rateLimit" $host.rateLimit }}
{{- end }}
{{- $processedHost = set $processedHost "preferred" (default false $host.preferred) }}
{{- if $processedHost.preferred }}
{{- $preferredHosts = append $preferredHosts $processedHost }}
{{- else }}
{{- $regularHosts = append $regularHosts $processedHost }}
{{- end }}
{{- end }}

{{- /* Combine all hosts with preferred ones first */ -}}
{{- $allHosts = concat $preferredHosts $regularHosts }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "common.fullname" . }}-photon-gateway-config
  labels:
    app.kubernetes.io/component: "photon-gateway"
    {{- include "common.labels" . | nindent 4 }}
data:
  envoy.yaml: |
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            protocol: TCP
            address: 0.0.0.0
            port_value: 8080
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              access_log:
              - name: envoy.access_loggers.stdout
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
              http_filters:
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    function envoy_on_request(request_handle)
                      -- Store the original path and query for fallback requests
                      local path = request_handle:headers():get(":path")
                      request_handle:headers():add("x-original-path", path)
                      
                      -- Track attempt number
                      local attempt = request_handle:headers():get("x-retry-attempt")
                      if not attempt then
                        attempt = "1"
                        request_handle:headers():add("x-retry-attempt", attempt)
                      end
                      
                      -- Determine which upstream to try based on attempt number
                      local attempt_num = tonumber(attempt)
                      request_handle:headers():add("x-target-cluster", "photon_host_" .. attempt_num)
                    end
                    
                    function envoy_on_response(response_handle)
                      local status = response_handle:headers():get(":status")
                      local body = response_handle:body()
                      
                      -- Check if we got a successful response with valid data
                      local has_results = false
                      if status == "200" and body then
                        local body_str = tostring(body:getBytes(0, body:length()))
                        -- Check if response contains geocoding results
                        -- Photon returns JSON with "features" array when no information is found: {"type":"FeatureCollection","features":[]}
                        if string.find(body_str, '"type"%s*:%s*"FeatureCollection"') then
                          -- Check if features array is not empty
                          if not string.find(body_str, '"features"%s*:%s*%[%s*%]') then
                            has_results = true
                          end
                        end
                      end
                      
                      -- If no results and we haven't exhausted all options, retry with next upstream
                      if not has_results then
                        local attempt = response_handle:headers():get("x-retry-attempt")
                        local attempt_num = tonumber(attempt or "1")
                        local max_attempts = {{ len $allHosts }}
                        
                        if attempt_num < max_attempts then
                          -- Retry with next upstream
                          local new_attempt = tostring(attempt_num + 1)
                          response_handle:headers():add("x-retry-attempt", new_attempt)
                          
                          -- Trigger internal retry
                          response_handle:respond(
                            {[":status"] = "503", ["x-retry"] = "true"},
                            "Retrying with next upstream"
                          )
                          return
                        end
                      end
                      
                      -- Return the response as-is
                    end
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
              route_config:
                name: local_route
                virtual_hosts:
                - name: local_service
                  domains: ["*"]
                  routes:
                  {{- range $index, $host := $allHosts }}
                  - match:
                      prefix: "/"
                      headers:
                      - name: "x-target-cluster"
                        exact_match: "photon_host_{{ add $index 1 }}"
                    route:
                      cluster: photon_host_{{ add $index 1 }}
                      retry_policy:
                        retry_on: 5xx,gateway-error,connect-failure,refused-stream
                        num_retries: 0  # We handle retries in Lua
                  {{- end }}
                  - match:
                      prefix: "/"
                    route:
                      cluster: photon_host_1  # Default to first host
      clusters:
      {{- range $index, $host := $allHosts }}
      - name: photon_host_{{ add $index 1 }}
        connect_timeout: 30s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        {{- if and (not $host.internal) (eq $host.scheme "https") }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            sni: {{ $host.host }}
        {{- end }}
        load_assignment:
          cluster_name: photon_host_{{ add $index 1 }}
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ $host.host }}
                    port_value: {{ $host.port }}
        health_checks:
        - timeout: {{ if $host.internal }}5s{{ else }}10s{{ end }}
          interval: {{ if $host.internal }}30s{{ else }}60s{{ end }}
          unhealthy_threshold: 3
          healthy_threshold: 2
          {{- if $host.internal }}
          tcp_health_check: {}
          {{- else }}
          http_health_check:
            path: /api
            expected_statuses:
            - start: 200
              end: 299
          {{- end }}
        {{- if $host.rateLimit }}
        {{- if gt (int $host.rateLimit) 0 }}
        # Rate limiting would be implemented here if needed
        # Currently handled by upstream servers
        {{- end }}
        {{- end }}
      {{- end }}
{{- end }}